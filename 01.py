
# Задание 1
# Импортируйте библиотеку Numpy и дайте ей псевдоним np.

import numpy as np

# 1. Создать одномерный массив Numpy под названием a из 12 последовательных целых чисел чисел от 12 до 24 невключительно

a = np.array([_ for _ in range(12, 24)])

# 2. Создать 5 двумерных массивов разной формы из массива a.
# Не использовать в аргументах метода reshape число -1.

a1 = a.reshape(2, 6)
a2 = a.reshape(3, 4)
a3 = a.reshape(4, 3)
a4 = a.reshape(6, 2)
a5 = np.reshape(a, (12, 1))

# 3. Создать 5 двумерных массивов разной формы из массива a.
# Использовать в аргументах метода reshape число -1 (в трех примерах - для обозначения числа столбцов, в двух - для строк).

b1 = a.reshape(-1, 6)
b2 = a.reshape(-1, 4)
b3 = a.reshape(12, -1)
b4 = a.reshape(6, -1)
b5 = np.reshape(a, (4, -1))

# 4. Можно ли массив Numpy, состоящий из одного столбца и 12 строк, назвать одномерным?

# Нет

# 5. Создать массив из 3 строк и 4 столбцов, состоящий из случайных чисел с плавающей запятой из нормального распределения
# со средним, равным 0 и среднеквадратичным отклонением, равным 1.0.
# Получить из этого массива одномерный массив с таким же атрибутом size, как и исходный массив.

a = np.random.randn(3, 4)
b = a.flatten()

# 6. Создать массив a, состоящий из целых чисел, убывающих от 20 до 0 невключительно с интервалом 2.
# Создать массив b, состоящий из 1 строки и 10 столбцов: целых чисел, убывающих от 20 до 1 невключительно с интервалом 2.
# В чем разница между массивами a и b?

a = np.arange(20, 0, -2)
b = np.arange(20, 1, -2)
# Нет разницы

# 7. Вертикально соединить массивы a и b. a - двумерный массив из нулей,
# число строк которого больше 1 и на 1 меньше, чем число строк двумерного массива b, состоящего из единиц.
# Итоговый массив v должен иметь атрибут size, равный 10.

a = np.zeros((2, 2))
b = np.ones((3, 2))
v = np.vstack((a, b))

# 8. Создать одномерный массив а, состоящий из последовательности целых чисел от 0 до 12.
# Поменять форму этого массива, чтобы получилась матрица A (двумерный массив Numpy), состоящая из
# 4 строк и 3 столбцов. Получить матрицу At путем транспонирования матрицы A.
# Получить матрицу B, умножив матрицу A на матрицу At с помощью матричного умножения.
# Какой размер имеет матрица B? Получится ли вычислить обратную матрицу для матрицы B и почему?

a = np.arange(12)
A = a.reshape(4, 3)
At = np.transpose(A)
B = np.dot(A, At)
print(B.size, B.shape)

# B_inv = np.linalg.inv(B)
# np.linalg.det(B)
# Обратную матрицу B вычислить не получится из-за исключения "Сингулярная
# матрица". Поскольку матрица с определителем 0 имеет не единственное решение.

# 9. Инициализируйте генератор случайных числе с помощью объекта seed, равного 42.
# Создайте одномерный массив c, составленный из последовательности 16-ти случайных целых чисел от 0 до 16 невключительно.
# Поменяйте его форму так, чтобы получилась квадратная матрица C.
# Получите матрицу D, поэлементно прибавив матрицу B из предыдущего вопроса к матрице C, умноженной на 10.
# Вычислите определитель, ранг и обратную матрицу D_inv для D.

np.random.seed(42)
c = np.random.randint(0, 16, 16)
C = c.reshape(4, 4)
D = B + C * 10
det_D = np.linalg.det(D)
rank_D = np.linalg.matrix_rank(D)
D_inv = np.linalg.inv(D)

# 10. Приравняйте к нулю отрицательные числа в матрице D_inv, а положительные - к единице.
# Убедитесь, что в матрице D_inv остались только нули и единицы.
# С помощью функции numpy.where, используя матрицу D_inv в качестве маски,
# а матрицы B и C - в качестве источников данных, получите матрицу E размером 4x4.
# Элементы матрицы E, для которых соответствующий элемент матрицы D_inv равен 1,
# должны быть равны соответствующему элементу матрицы B,
# а элементы матрицы E, для которых соответствующий элемент матрицы D_inv равен 0,
# должны быть равны соответствующему элементу матрицы C.

D_inv[D_inv < 0] = 0
D_inv[D_inv > 0] = 1
E = np.where(D_inv, B, C)

# Задание 2
# Создайте массив Numpy под названием a размером 5x2, то есть состоящий из 5 строк и 2 столбцов.
# Первый столбец должен содержать числа 1, 2, 3, 3, 1, а второй - числа 6, 8, 11, 10, 7.
# Будем считать, что каждый столбец - это признак, а строка - наблюдение.
# Затем найдите среднее значение по каждому признаку, используя метод mean массива Numpy.
# Результат запишите в массив mean_a, в нем должно быть 2 элемента.

a = np.array([[1, 2, 3, 3 , 1],
              [6, 8, 11, 10, 7]]).T
mean_a = np.mean(a, axis=0)

# Задание 3
# Вычислите массив a_centered, отняв от значений массива а
# средние значения соответствующих признаков, содержащиеся в массиве mean_a.
# Вычисление должно производиться в одно действие. Получившийся массив должен иметь размер 5x2.

a_centered = a - mean_a

# Задание 4
# Найдите скалярное произведение столбцов массива a_centered. В результате должна получиться величина a_centered_sp.
# Затем поделите a_centered_sp на N-1, где N - число наблюдений.

a_centered_sp = np.dot(a_centered[:, 0], a_centered[:, 1])
N = a_centered.shape[0]
a_cov = a_centered_sp / (N - 1)

# * Задание 5
# Число, которое мы получили в конце задания 4 является ковариацией двух признаков, содержащихся в массиве а.
# Мы делили сумму произведений центрированных признаков на N-1, а не на N,
# поэтому полученная нами величина является несмещенной оценкой ковариации.
# Подробнее узнать о ковариации можно здесь:
# https://studopedia.ru/9_153900_viborochnaya-kovariatsiya-i-viborochnaya-dispersiya.html
# В этом задании проверьте получившееся число, вычислив ковариацию с помощью функции np.cov.
# В качестве аргумента m функция np.cov должна принимать транспонированный массив a.
# В получившейся ковариационной матрице (массив Numpy размером 2x2) искомое значение
# ковариации будет равно элементу в строке с индексом 0 и столбце с индексом 1.

cov = np.cov(a.T)[0, 1]
